template <typename T>
struct LzySeg
{
    vector<T> seg, lzy;
    int n;
    LzySeg(int size) : n(size)
    {
        seg = vector<T>(4 * n);
        lzy = vector<T>(4 * n);
    }
    T combine(T left, T right)
    {
        return max(left, right);
    }
    void prob(int l, int r, int p)
    {
        if (p >= 4 * n || !lzy[p] || l > r)
            return;
        seg[p] += lzy[p];
        if (l != r)
        {
            lzy[p << 1] += lzy[p];
            lzy[p << 1 | 1] += lzy[p];
        }
        lzy[p] = 0;
    }
    void add(int l, int r, T val, int al, int ar, int p)
    {
        prob(al, ar, p);
        if (al > r || ar < l || al > ar || l > r)
            return;
        if (al >= l && ar <= r)
        {
            lzy[p] += val;
            prob(al, ar, p);
            return;
        }
        int md = (al + ar) >> 1;
        add(l, r, val, al, md, p << 1);
        add(l, r, val, md + 1, ar, p << 1 | 1);
        seg[p] = combine(seg[p << 1], seg[p << 1 | 1]);
    }
    T get(int l, int r, int al, int ar, int p)
    {
        prob(al, ar, p);
        if (al > r || ar < l || al > ar || l > r)
            return T();
        if (al >= l && ar <= r)
        {
            return seg[p];
        }
        int md = (al + ar) >> 1;
        return combine(get(l, r, al, md, p << 1), get(l, r, md + 1, ar, p << 1 | 1));
    }
    void add(int l, int r, T val)
    {
        add(l, r, val, 0, n - 1, 1);
    }
    T get(int l, int r)
    {
        return get(l, r, 0, n - 1, 1);
    }
    T const operator[](int idx)
    {
        return get(idx, idx, 0, n - 1, 1);
    }
};