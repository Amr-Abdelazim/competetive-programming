template <typename T>
class max_seg
{
public:
    max_seg() {}

    max_seg(vector<T> x)
    {
        a = x;
        n = x.size();
        seg = vector<pair<T, int>>(4 * n);
        bld(0, n - 1, 1);
    }
    T get_max(int l, int r)
    {
        return get(l, r, 0, n - 1, 1).first;
    }
    void update(int dx, T val)
    {
        upd(dx, val, 0, n - 1, 1);
    }

private:
    vector<T> a;
    vector<pair<T, int>> seg;
    int n;
    void bld(int l, int r, int p)
    {
        if (l > r)
            return;
        if (l == r)
        {
            seg[p].first = a[l];
            seg[p].second = l;
            return;
        }
        int md = (l + r) >> 1;
        bld(l, md, p << 1);
        bld(md + 1, r, p << 1 | 1);
        seg[p] = max(seg[p << 1], seg[p << 1 | 1]);
    }
    pair<T, int> get(int l, int r, int al, int ar, int p)
    {
        if (l > ar || r < al || al > ar)
            return {T(), -1};
        if (al >= l && ar <= r)
        {
            return seg[p];
        }
        int md = (al + ar) >> 1;
        return max(get(l, r, al, md, p << 1), get(l, r, md + 1, ar, p << 1 | 1));
    }
    void upd(int dx, T val, int al, int ar, int p)
    {
        if (dx > ar || dx < al || al > ar)
            return;
        if (al >= dx && ar <= dx)
        {
            a[al] = val;
            seg[p] = {val, al};
            return;
        }
        int md = (al + ar) >> 1;
        upd(dx, val, al, md, p << 1);
        upd(dx, val, md + 1, ar, p << 1 | 1);
        seg[p] = max(seg[p << 1], seg[p << 1 | 1]);
    }
};