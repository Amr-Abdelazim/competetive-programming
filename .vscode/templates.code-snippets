{
	// Place your competetive-programming workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"my-template":{
		"prefix": "!!init",
		"body": ["#ifdef ONLINE_JUDGE",
			"#include <bits/stdc++.h>",
			"// For ordered_set",
			"#include <ext/pb_ds/assoc_container.hpp>",
			"#include <ext/pb_ds/tree_policy.hpp>",
			"#else",
			"#include \"precompiled.h\"",
			"#endif",
			"",
			"using namespace std;",
			"using namespace __gnu_pbds;",
			"template <typename T>",
			"using ord_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;",
			"",
			"signed main()",
			"{",
			"    return 0;",
			"}",]
	},
	"nCr":{
		"prefix": "!!ncr",
		"body": ["// ^(.*)$   \"\\$1\",",
			"vector<long long> fact, inv_fact;",
			"",
			"long long mod_pow(long long a, long long b, int mod)",
			"{",
			"    long long res = 1;",
			"    while (b > 0)",
			"    {",
			"        if (b % 2 == 1)",
			"        {",
			"            res = (res * a) % mod;",
			"        }",
			"        a = (a * a) % mod;",
			"        b /= 2;",
			"    }",
			"    return res;",
			"}",
			"",
			"void precompute_factorials(int n, int mod)",
			"{",
			"    fact.resize(n + 1);",
			"    inv_fact.resize(n + 1);",
			"    fact[0] = 1;",
			"    for (int i = 1; i <= n; ++i)",
			"    {",
			"        fact[i] = fact[i - 1] * i % mod;",
			"    }",
			"",
			"    for (int i = n; i >= 0; --i)",
			"    {",
			"        inv_fact[i] = mod_pow(fact[i], mod - 2, mod);",
			"    }",
			"}",
			"",
			"long long nCr(int n, int r, int mod)",
			"{",
			"    if (r > n || r < 0)",
			"        return 0;",
			"    return fact[n] * inv_fact[r] % mod * inv_fact[n - r] % mod;",
			"}",]
	}
}